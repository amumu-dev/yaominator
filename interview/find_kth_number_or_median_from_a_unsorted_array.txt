To do this, you select a random pivot 
and partition the array as you would in the quicksort algorithm.  Then, based on the 
index of the pivot element, you know which half of the array the desired element lies 
in.  For example, say k = 15 and n = 30, and after you select your pivot and partition 
the array, the first half has 10 elements (the half before the pivot).  You know that 
the desired element is the 4th smallest element in the larger half.  To identify the 
element, you partition the second half of the array and continue recursively.  The 
reason that this is not O(n log n) is that the recursive partition call is only on one 
half of the array, so the expected running time is n + (n/2) + (n/4) + (n/8) + ... = 
O(n). 


Note that finding the median of an array is a special case of this where k = n / 2.  
This is a very important point, as an interviewer will often ask you to find a way to 
get the median of an array of numbers.


